// Generated by CoffeeScript 1.7.1
(function() {
  var ArrayProto, nativeForEach, nativeIsArray, nativeMap, nativeReduce, _is_css_blur_supported, _linear_partition, _scrollbar_width,
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function(module) {
    if (typeof define === "function" && define.amd) {
      define(["jquery"], module);
    } else {
      module(jQuery);
    }
  })(function(jQuery, undefined_) {
    var Timer, activeMouseend, activeMousemove, activeTouchend, activeTouchmove, add, addMethod, changedTouch, checkThreshold, endEvent, flagAsHandled, handled, identifiedTouch, ignoreTags, isLeftButton, mousedown, mouseend, mouseevents, mousemove, preventDefault, preventIgnoreTags, remove, removeActiveMouse, removeActiveTouch, removeMethod, removeMouse, removeTouch, requestFrame, returnFalse, returnTrue, setup, teardown, threshold, touchend, touchevents, touchmove, touchstart, trigger, triggerStart, updateEvent;
    Timer = function(fn) {
      var active, callback, running, trigger;
      trigger = function(time) {
        var active, running;
        if (active) {
          callback();
          requestFrame(trigger);
          running = true;
          active = false;
        } else {
          running = false;
        }
      };
      callback = fn;
      active = false;
      running = false;
      this.kick = function(fn) {
        active = true;
        if (!running) {
          trigger();
        }
      };
      this.end = function(fn) {
        var cb;
        cb = callback;
        if (!fn) {
          return;
        }
        if (!running) {
          fn();
        } else {
          callback = (active ? function() {
            cb();
            fn();
          } : fn);
        }
        active = true;
      };
    };
    returnTrue = function() {
      return true;
    };
    returnFalse = function() {
      return false;
    };
    preventDefault = function(e) {
      e.preventDefault();
    };
    preventIgnoreTags = function(e) {
      if (ignoreTags[e.target.tagName.toLowerCase()]) {
        return;
      }
      e.preventDefault();
    };
    isLeftButton = function(e) {
      return e.which === 1 && !e.ctrlKey && !e.altKey;
    };
    identifiedTouch = function(touchList, id) {
      var i, l;
      i = void 0;
      l = void 0;
      if (touchList.identifiedTouch) {
        return touchList.identifiedTouch(id);
      }
      i = -1;
      l = touchList.length;
      if ((function() {
        var _results;
        _results = [];
        while (++i < l) {
          _results.push(touchList[i].identifier === id);
        }
        return _results;
      })()) {
        return touchList[i];
      }
    };
    changedTouch = function(e, event) {
      var touch;
      touch = identifiedTouch(e.changedTouches, event.identifier);
      if (!touch) {
        return;
      }
      if (touch.pageX === event.pageX && touch.pageY === event.pageY) {
        return;
      }
      return touch;
    };
    mousedown = function(e) {
      var data;
      data = void 0;
      if (!isLeftButton(e)) {
        return;
      }
      data = {
        target: e.target,
        startX: e.pageX,
        startY: e.pageY,
        timeStamp: e.timeStamp
      };
      add(document, mouseevents.move, mousemove, data);
      add(document, mouseevents.cancel, mouseend, data);
    };
    mousemove = function(e) {
      var data;
      data = e.data;
      checkThreshold(e, data, e, removeMouse);
    };
    mouseend = function(e) {
      removeMouse();
    };
    removeMouse = function() {
      remove(document, mouseevents.move, mousemove);
      remove(document, mouseevents.cancel, mouseend);
    };
    touchstart = function(e) {
      var template, touch;
      touch = void 0;
      template = void 0;
      if (ignoreTags[e.target.tagName.toLowerCase()]) {
        return;
      }
      touch = e.changedTouches[0];
      template = {
        target: touch.target,
        startX: touch.pageX,
        startY: touch.pageY,
        timeStamp: e.timeStamp,
        identifier: touch.identifier
      };
      add(document, touchevents.move + "." + touch.identifier, touchmove, template);
      add(document, touchevents.cancel + "." + touch.identifier, touchend, template);
    };
    touchmove = function(e) {
      var data, touch;
      data = e.data;
      touch = changedTouch(e, data);
      if (!touch) {
        return;
      }
      checkThreshold(e, data, touch, removeTouch);
    };
    touchend = function(e) {
      var template, touch;
      template = e.data;
      touch = identifiedTouch(e.changedTouches, template.identifier);
      if (!touch) {
        return;
      }
      removeTouch(template.identifier);
    };
    removeTouch = function(identifier) {
      remove(document, "." + identifier, touchmove);
      remove(document, "." + identifier, touchend);
    };
    checkThreshold = function(e, template, touch, fn) {
      var distX, distY;
      distX = touch.pageX - template.startX;
      distY = touch.pageY - template.startY;
      if ((distX * distX) + (distY * distY) < (threshold * threshold)) {
        return;
      }
      triggerStart(e, template, touch, distX, distY, fn);
    };
    handled = function() {
      this._handled = returnTrue;
      return false;
    };
    flagAsHandled = function(e) {
      e._handled();
    };
    triggerStart = function(e, template, touch, distX, distY, fn) {
      var node, time, touches;
      node = template.target;
      touches = void 0;
      time = void 0;
      touches = e.targetTouches;
      time = e.timeStamp - template.timeStamp;
      template.type = "movestart";
      template.distX = distX;
      template.distY = distY;
      template.deltaX = distX;
      template.deltaY = distY;
      template.pageX = touch.pageX;
      template.pageY = touch.pageY;
      template.velocityX = distX / time;
      template.velocityY = distY / time;
      template.targetTouches = touches;
      template.finger = (touches ? touches.length : 1);
      template._handled = handled;
      template._preventTouchmoveDefault = function() {
        e.preventDefault();
      };
      trigger(template.target, template);
      fn(template.identifier);
    };
    activeMousemove = function(e) {
      var event, timer;
      event = e.data.event;
      timer = e.data.timer;
      updateEvent(event, e, e.timeStamp, timer);
    };
    activeMouseend = function(e) {
      var event, timer;
      event = e.data.event;
      timer = e.data.timer;
      removeActiveMouse();
      endEvent(event, timer, function() {
        setTimeout((function() {
          remove(event.target, "click", returnFalse);
        }), 0);
      });
    };
    removeActiveMouse = function(event) {
      remove(document, mouseevents.move, activeMousemove);
      remove(document, mouseevents.end, activeMouseend);
    };
    activeTouchmove = function(e) {
      var event, timer, touch;
      event = e.data.event;
      timer = e.data.timer;
      touch = changedTouch(e, event);
      if (!touch) {
        return;
      }
      e.preventDefault();
      event.targetTouches = e.targetTouches;
      updateEvent(event, touch, e.timeStamp, timer);
    };
    activeTouchend = function(e) {
      var event, timer, touch;
      event = e.data.event;
      timer = e.data.timer;
      touch = identifiedTouch(e.changedTouches, event.identifier);
      if (!touch) {
        return;
      }
      removeActiveTouch(event);
      endEvent(event, timer);
    };
    removeActiveTouch = function(event) {
      remove(document, "." + event.identifier, activeTouchmove);
      remove(document, "." + event.identifier, activeTouchend);
    };
    updateEvent = function(event, touch, timeStamp, timer) {
      var time;
      time = timeStamp - event.timeStamp;
      event.type = "move";
      event.distX = touch.pageX - event.startX;
      event.distY = touch.pageY - event.startY;
      event.deltaX = touch.pageX - event.pageX;
      event.deltaY = touch.pageY - event.pageY;
      event.velocityX = 0.3 * event.velocityX + 0.7 * event.deltaX / time;
      event.velocityY = 0.3 * event.velocityY + 0.7 * event.deltaY / time;
      event.pageX = touch.pageX;
      event.pageY = touch.pageY;
      timer.kick();
    };
    endEvent = function(event, timer, fn) {
      timer.end(function() {
        event.type = "moveend";
        trigger(event.target, event);
        return fn && fn();
      });
    };
    setup = function(data, namespaces, eventHandle) {
      add(this, "movestart.move", flagAsHandled);
      return true;
    };
    teardown = function(namespaces) {
      remove(this, "dragstart drag", preventDefault);
      remove(this, "mousedown touchstart", preventIgnoreTags);
      remove(this, "movestart", flagAsHandled);
      return true;
    };
    addMethod = function(handleObj) {
      if (handleObj.namespace === "move" || handleObj.namespace === "moveend") {
        return;
      }
      add(this, "dragstart." + handleObj.guid + " drag." + handleObj.guid, preventDefault, undefined, handleObj.selector);
      add(this, "mousedown." + handleObj.guid, preventIgnoreTags, undefined, handleObj.selector);
    };
    removeMethod = function(handleObj) {
      if (handleObj.namespace === "move" || handleObj.namespace === "moveend") {
        return;
      }
      remove(this, "dragstart." + handleObj.guid + " drag." + handleObj.guid);
      remove(this, "mousedown." + handleObj.guid);
    };
    threshold = 6;
    add = jQuery.event.add;
    remove = jQuery.event.remove;
    trigger = function(node, type, data) {
      jQuery.event.trigger(type, data, node);
    };
    requestFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(fn, element) {
        return window.setTimeout((function() {
          fn();
        }), 25);
      };
    })();
    ignoreTags = {
      textarea: true,
      input: true,
      select: true,
      button: true
    };
    mouseevents = {
      move: "mousemove",
      cancel: "mouseup dragstart",
      end: "mouseup"
    };
    touchevents = {
      move: "touchmove",
      cancel: "touchend",
      end: "touchend"
    };
    jQuery.event.special.movestart = {
      setup: setup,
      teardown: teardown,
      add: addMethod,
      remove: removeMethod,
      _default: function(e) {
        var data, template;
        template = void 0;
        data = void 0;
        if (!e._handled()) {
          return;
        }
        template = {
          target: e.target,
          startX: e.startX,
          startY: e.startY,
          pageX: e.pageX,
          pageY: e.pageY,
          distX: e.distX,
          distY: e.distY,
          deltaX: e.deltaX,
          deltaY: e.deltaY,
          velocityX: e.velocityX,
          velocityY: e.velocityY,
          timeStamp: e.timeStamp,
          identifier: e.identifier,
          targetTouches: e.targetTouches,
          finger: e.finger
        };
        data = {
          event: template,
          timer: new Timer(function(time) {
            trigger(e.target, template);
          })
        };
        if (e.identifier === undefined) {
          add(e.target, "click", returnFalse);
          add(document, mouseevents.move, activeMousemove, data);
          add(document, mouseevents.end, activeMouseend, data);
        } else {
          e._preventTouchmoveDefault();
          add(document, touchevents.move + "." + e.identifier, activeTouchmove, data);
          add(document, touchevents.end + "." + e.identifier, activeTouchend, data);
        }
      }
    };
    jQuery.event.special.move = {
      setup: function() {
        add(this, "movestart.move", jQuery.noop);
      },
      teardown: function() {
        remove(this, "movestart.move", jQuery.noop);
      }
    };
    jQuery.event.special.moveend = {
      setup: function() {
        add(this, "movestart.moveend", jQuery.noop);
      },
      teardown: function() {
        remove(this, "movestart.moveend", jQuery.noop);
      }
    };
    add(document, "mousedown.move", mousedown);
    add(document, "touchstart.move", touchstart);
    if (typeof Array.prototype.indexOf === "function") {
      (function(jQuery, undefined_) {
        var l, props;
        props = ["changedTouches", "targetTouches"];
        l = props.length;
        if ((function() {
          var _results;
          _results = [];
          while (l--) {
            _results.push(jQuery.event.props.indexOf(props[l]) === -1);
          }
          return _results;
        })()) {
          jQuery.event.props.push(props[l]);
        }
      })(jQuery);
    }
  });

  (function(module) {
    if (typeof define === "function" && define.amd) {
      define(["jquery"], module);
    } else {
      module(jQuery);
    }
  })(function(jQuery, undefined_) {
    var add, getData, moveend, remove, settings, trigger;
    moveend = function(e) {
      var event, h, w;
      w = void 0;
      h = void 0;
      event = void 0;
      w = e.target.offsetWidth;
      h = e.target.offsetHeight;
      event = {
        distX: e.distX,
        distY: e.distY,
        velocityX: e.velocityX,
        velocityY: e.velocityY,
        finger: e.finger
      };
      event.type = "swipecanceled";
      if (e.distX > e.distY) {
        if (e.distX > -e.distY) {
          if (e.distX / w > settings.threshold || e.velocityX * e.distX / w * settings.sensitivity > 1) {
            event.type = "swiperight";
          }
        } else {
          if (-e.distY / h > settings.threshold || e.velocityY * e.distY / w * settings.sensitivity > 1) {
            event.type = "swipeup";
          }
        }
      } else {
        if (e.distX > -e.distY) {
          if (e.distY / h > settings.threshold || e.velocityY * e.distY / w * settings.sensitivity > 1) {
            event.type = "swipedown";
          }
        } else {
          if (-e.distX / w > settings.threshold || e.velocityX * e.distX / w * settings.sensitivity > 1) {
            event.type = "swipeleft";
          }
        }
      }
      trigger(e.currentTarget, event);
    };
    getData = function(node) {
      var data;
      data = jQuery.data(node, "event_swipe");
      if (!data) {
        data = {
          count: 0
        };
        jQuery.data(node, "event_swipe", data);
      }
      return data;
    };
    add = jQuery.event.add;
    remove = jQuery.event.remove;
    trigger = function(node, type, data) {
      jQuery.event.trigger(type, data, node);
    };
    settings = {
      threshold: 0.4,
      sensitivity: 6
    };
    jQuery.event.special.swipe = jQuery.event.special.swipeleft = jQuery.event.special.swiperight = jQuery.event.special.swipeup = jQuery.event.special.swipedown = {
      setup: function(data, namespaces, eventHandle) {
        data = getData(this);
        if (data.count++ > 0) {
          return;
        }
        add(this, "moveend", moveend);
        return true;
      },
      teardown: function() {
        var data;
        data = getData(this);
        if (--data.count > 0) {
          return;
        }
        remove(this, "moveend", moveend);
        return true;
      },
      settings: settings
    };
  });

  (function(global) {
    var addEvent, assignKey, clearModifier, code, compareArray, deleteScope, dispatch, filter, getKeys, getMods, getPressedKeyCodes, getScope, index, isPressed, k, modifierMap, noConflict, previousKey, resetModifiers, setScope, unbindKey, updateModifierKey, _MAP, _MODIFIERS, _downKeys, _handlers, _mods, _scope;
    index = function(array, item) {
      var i;
      i = array.length;
      if ((function() {
        var _results;
        _results = [];
        while (i--) {
          _results.push(array[i] === item);
        }
        return _results;
      })()) {
        return i;
      }
      return -1;
    };
    compareArray = function(a1, a2) {
      var i;
      if (a1.length !== a2.length) {
        return false;
      }
      i = 0;
      while (i < a1.length) {
        if (a1[i] !== a2[i]) {
          return false;
        }
        i++;
      }
      return true;
    };
    updateModifierKey = function(event) {
      var k;
      for (k in _mods) {
        continue;
      }
    };
    dispatch = function(event, scope) {
      var handler, i, k, key, modifiersMatch;
      key = void 0;
      handler = void 0;
      k = void 0;
      i = void 0;
      modifiersMatch = void 0;
      key = event.keyCode;
      if (index(_downKeys, key) === -1) {
        _downKeys.push(key);
      }
      if (key === 93 || key === 224) {
        key = 91;
      }
      if (key in _mods) {
        _mods[key] = true;
        for (k in _MODIFIERS) {
          continue;
        }
        return;
      }
      updateModifierKey(event);
      if (!assignKey.filter.call(this, event)) {
        return;
      }
      if (!(key in _handlers)) {
        return;
      }
      i = 0;
      while (i < _handlers[key].length) {
        handler = _handlers[key][i];
        if (handler.scope === scope || handler.scope === "all") {
          modifiersMatch = handler.mods.length > 0;
          for (k in _mods) {
            continue;
          }
          if ((handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch) {
            if (handler.method(event, handler) === false) {
              if (event.preventDefault) {
                event.preventDefault();
              } else {
                event.returnValue = false;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              }
              if (event.cancelBubble) {
                event.cancelBubble = true;
              }
            }
          }
        }
        i++;
      }
    };
    clearModifier = function(event) {
      var i, k, key;
      key = event.keyCode;
      k = void 0;
      i = index(_downKeys, key);
      if (i >= 0) {
        _downKeys.splice(i, 1);
      }
      if (key === 93 || key === 224) {
        key = 91;
      }
      if (key in _mods) {
        _mods[key] = false;
        for (k in _MODIFIERS) {
          continue;
        }
      }
    };
    resetModifiers = function() {
      var k;
      for (k in _mods) {
        continue;
      }
      for (k in _MODIFIERS) {
        continue;
      }
    };
    assignKey = function(key, scope, method) {
      var i, keys, mods;
      keys = void 0;
      mods = void 0;
      keys = getKeys(key);
      if (method === undefined) {
        method = scope;
        scope = "all";
      }
      i = 0;
      while (i < keys.length) {
        mods = [];
        key = keys[i].split("+");
        if (key.length > 1) {
          mods = getMods(key);
          key = [key[key.length - 1]];
        }
        key = key[0];
        key = code(key);
        if (!(key in _handlers)) {
          _handlers[key] = [];
        }
        _handlers[key].push({
          shortcut: keys[i],
          scope: scope,
          method: method,
          key: keys[i],
          mods: mods
        });
        i++;
      }
    };
    unbindKey = function(key, scope) {
      var i, keys, mods, obj;
      keys = key.split("+");
      mods = [];
      i = void 0;
      obj = void 0;
      if (keys.length > 1) {
        mods = getMods(keys);
        key = keys[keys.length - 1];
      }
      key = code(key);
      if (scope === undefined) {
        scope = getScope();
      }
      if (!_handlers[key]) {
        return;
      }
      for (i in _handlers[key]) {
        obj = _handlers[key][i];
        if (obj.scope === scope && compareArray(obj.mods, mods)) {
          _handlers[key][i] = {};
        }
      }
    };
    isPressed = function(keyCode) {
      if (typeof keyCode === "string") {
        keyCode = code(keyCode);
      }
      return index(_downKeys, keyCode) !== -1;
    };
    getPressedKeyCodes = function() {
      return _downKeys.slice(0);
    };
    filter = function(event) {
      var tagName;
      tagName = (event.target || event.srcElement).tagName;
      return !(tagName === "INPUT" || tagName === "SELECT" || tagName === "TEXTAREA");
    };
    setScope = function(scope) {
      var _scope;
      _scope = scope || "all";
    };
    getScope = function() {
      return _scope || "all";
    };
    deleteScope = function(scope) {
      var handlers, i, key;
      key = void 0;
      handlers = void 0;
      i = void 0;
      for (key in _handlers) {
        handlers = _handlers[key];
        i = 0;
        while (i < handlers.length) {
          if (handlers[i].scope === scope) {
            handlers.splice(i, 1);
          } else {
            i++;
          }
        }
      }
    };
    getKeys = function(key) {
      var keys;
      keys = void 0;
      key = key.replace(/\s/g, "");
      keys = key.split(",");
      if (keys[keys.length - 1] === "") {
        keys[keys.length - 2] += ",";
      }
      return keys;
    };
    getMods = function(key) {
      var mi, mods;
      mods = key.slice(0, key.length - 1);
      mi = 0;
      while (mi < mods.length) {
        mods[mi] = _MODIFIERS[mods[mi]];
        mi++;
      }
      return mods;
    };
    addEvent = function(object, event, method) {
      if (object.addEventListener) {
        object.addEventListener(event, method, false);
      } else if (object.attachEvent) {
        object.attachEvent("on" + event, function() {
          method(window.event);
        });
      }
    };
    noConflict = function() {
      var k;
      k = global.key;
      global.key = previousKey;
      return k;
    };
    k = void 0;
    _handlers = {};
    _mods = {
      16: false,
      18: false,
      17: false,
      91: false
    };
    _scope = "all";
    _MODIFIERS = {
      "⇧": 16,
      shift: 16,
      "⌥": 18,
      alt: 18,
      option: 18,
      "⌃": 17,
      ctrl: 17,
      control: 17,
      "⌘": 91,
      command: 91
    };
    _MAP = {
      backspace: 8,
      tab: 9,
      clear: 12,
      enter: 13,
      "return": 13,
      esc: 27,
      escape: 27,
      space: 32,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      del: 46,
      "delete": 46,
      home: 36,
      end: 35,
      pageup: 33,
      pagedown: 34,
      ",": 188,
      ".": 190,
      "/": 191,
      "`": 192,
      "-": 189,
      "=": 187,
      ";": 186,
      "'": 222,
      "[": 219,
      "]": 221,
      "\\": 220
    };
    code = function(x) {
      return _MAP[x] || x.toUpperCase().charCodeAt(0);
    };
    _downKeys = [];
    k = 1;
    while (k < 20) {
      _MAP["f" + k] = 111 + k;
      k++;
    }
    modifierMap = {
      16: "shiftKey",
      18: "altKey",
      17: "ctrlKey",
      91: "metaKey"
    };
    for (k in _MODIFIERS) {
      continue;
    }
    addEvent(document, "keydown", function(event) {
      dispatch(event, _scope);
    });
    addEvent(document, "keyup", clearModifier);
    addEvent(window, "focus", resetModifiers);
    previousKey = global.key;
    global.key = assignKey;
    global.key.setScope = setScope;
    global.key.getScope = getScope;
    global.key.deleteScope = deleteScope;
    global.key.filter = filter;
    global.key.isPressed = isPressed;
    global.key.getPressedKeyCodes = getPressedKeyCodes;
    global.key.noConflict = noConflict;
    global.key.unbind = unbindKey;
    if (typeof module !== "undefined") {
      module.exports = key;
    }
  })(this);

  if (typeof _ === "undefined" || _ === null) {
    this._ = {};
    ArrayProto = Array.prototype;
    nativeForEach = ArrayProto.forEach;
    nativeMap = ArrayProto.map;
    nativeReduce = ArrayProto.reduce;
    nativeIsArray = Array.isArray;
    _.isObject = function(obj) {
      var type;
      type = typeof obj;
      return type === "function" || type === "object" && !!obj;
    };
    _.after = function(times, func) {
      return function() {
        if (--times < 1) {
          return func.apply(this, arguments);
        }
      };
    };
    _.each = function(obj, iterator, context) {
      var e, i, key, val, _i, _ref;
      try {
        if (nativeForEach && obj.forEach === nativeForEach) {
          obj.forEach(iterator, context);
        } else if (_.isNumber(obj.length)) {
          for (i = _i = 0, _ref = obj.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
            iterator.call(context, obj[i], i, obj);
          }
        } else {
          for (key in obj) {
            if (!__hasProp.call(obj, key)) continue;
            val = obj[key];
            iterator.call(context, val, key, obj);
          }
        }
      } catch (_error) {
        e = _error;
      }
      return obj;
    };
    _.map = function(obj, iterator, context) {
      var results;
      if (nativeMap && obj.map === nativeMap) {
        return obj.map(iterator, context);
      }
      results = [];
      _.each(obj, function(value, index, list) {
        return results.push(iterator.call(context, value, index, list));
      });
      return results;
    };
    _.reduce = function(obj, iterator, memo, context) {
      if (nativeReduce && obj.reduce === nativeReduce) {
        if (context) {
          iterator = _.bind(iterator, context);
        }
        return obj.reduce(iterator, memo);
      }
      _.each(obj, function(value, index, list) {
        return memo = iterator.call(context, memo, value, index, list);
      });
      return memo;
    };
    _.isArray = nativeIsArray || function(obj) {
      return !!(obj && obj.concat && obj.unshift && !obj.callee);
    };
    _.max = function(obj, iterator, context) {
      var result;
      if (!iterator && _.isArray(obj)) {
        return Math.max.apply(Math, obj);
      }
      result = {
        computed: -Infinity
      };
      _.each(obj, function(value, index, list) {
        var computed;
        computed = iterator ? iterator.call(context, value, index, list) : value;
        return computed >= result.computed && (result = {
          value: value,
          computed: computed
        });
      });
      return result.value;
    };
    _.min = function(obj, iterator, context) {
      var result;
      if (!iterator && _.isArray(obj)) {
        return Math.min.apply(Math, obj);
      }
      result = {
        computed: Infinity
      };
      _.each(obj, function(value, index, list) {
        var computed;
        computed = iterator ? iterator.call(context, value, index, list) : value;
        return computed < result.computed && (result = {
          value: value,
          computed: computed
        });
      });
      return result.value;
    };
    _.now = Date.now || function() {
      return new Date().getTime();
    };
    _.throttle = function(func, wait, options) {
      var args, context, later, previous, result, timeout;
      context = void 0;
      args = void 0;
      result = void 0;
      timeout = null;
      previous = 0;
      options || (options = {});
      later = function() {
        previous = (options.leading === false ? 0 : _.now());
        timeout = null;
        result = func.apply(context, args);
        context = args = null;
      };
      return function() {
        var now, remaining;
        now = _.now();
        if (!previous && options.leading === false) {
          previous = now;
        }
        remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0) {
          clearTimeout(timeout);
          timeout = null;
          previous = now;
          result = func.apply(context, args);
          context = args = null;
        } else {
          if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
        }
        return result;
      };
    };
    _.debounce = function(func, wait, immediate) {
      var args, context, later, result, timeout, timestamp;
      timeout = void 0;
      args = void 0;
      context = void 0;
      timestamp = void 0;
      result = void 0;
      later = function() {
        var last;
        last = _.now() - timestamp;
        if (last < wait) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!immediate) {
            result = func.apply(context, args);
            context = args = null;
          }
        }
      };
      return function() {
        var callNow;
        context = this;
        args = arguments;
        timestamp = _.now();
        callNow = immediate && !timeout;
        if (!timeout) {
          timeout = setTimeout(later, wait);
        }
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
    };
  }

  $.fn.extend({
    chromatic: function(photos, options) {
      new Chromatic.GalleryView(this, photos, options);
      return this;
    }
  });

  this.Chromatic = this.Chromatic || {};

  _linear_partition = (function() {
    var _cache;
    _cache = {};
    return function(seq, k) {
      var ans, i, j, key, m, n, solution, table, x, y, _i, _j, _k, _l;
      key = seq.join() + k;
      if (_cache[key]) {
        return _cache[key];
      }
      n = seq.length;
      if (k <= 0) {
        return [];
      }
      if (k > n) {
        return seq.map(function(x) {
          return [x];
        });
      }
      table = (function() {
        var _i, _results;
        _results = [];
        for (y = _i = 0; 0 <= n ? _i < n : _i > n; y = 0 <= n ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (x = _j = 0; 0 <= k ? _j < k : _j > k; x = 0 <= k ? ++_j : --_j) {
              _results1.push(0);
            }
            return _results1;
          })());
        }
        return _results;
      })();
      solution = (function() {
        var _i, _ref, _results;
        _results = [];
        for (y = _i = 0, _ref = n - 1; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref1, _results1;
            _results1 = [];
            for (x = _j = 0, _ref1 = k - 1; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
              _results1.push(0);
            }
            return _results1;
          })());
        }
        return _results;
      })();
      for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
        table[i][0] = seq[i] + (i ? table[i - 1][0] : 0);
      }
      for (j = _j = 0; 0 <= k ? _j < k : _j > k; j = 0 <= k ? ++_j : --_j) {
        table[0][j] = seq[0];
      }
      for (i = _k = 1; 1 <= n ? _k < n : _k > n; i = 1 <= n ? ++_k : --_k) {
        for (j = _l = 1; 1 <= k ? _l < k : _l > k; j = 1 <= k ? ++_l : --_l) {
          m = _.min((function() {
            var _m, _results;
            _results = [];
            for (x = _m = 0; 0 <= i ? _m < i : _m > i; x = 0 <= i ? ++_m : --_m) {
              _results.push([_.max([table[x][j - 1], table[i][0] - table[x][0]]), x]);
            }
            return _results;
          })(), function(o) {
            return o[0];
          });
          table[i][j] = m[0];
          solution[i - 1][j - 1] = m[1];
        }
      }
      n = n - 1;
      k = k - 2;
      ans = [];
      while (k >= 0) {
        ans = [
          (function() {
            var _m, _ref, _ref1, _results;
            _results = [];
            for (i = _m = _ref = solution[n - 1][k] + 1, _ref1 = n + 1; _ref <= _ref1 ? _m < _ref1 : _m > _ref1; i = _ref <= _ref1 ? ++_m : --_m) {
              _results.push(seq[i]);
            }
            return _results;
          })()
        ].concat(ans);
        n = solution[n - 1][k];
        k = k - 1;
      }
      return _cache[key] = [
        (function() {
          var _m, _ref, _results;
          _results = [];
          for (i = _m = 0, _ref = n + 1; 0 <= _ref ? _m < _ref : _m > _ref; i = 0 <= _ref ? ++_m : --_m) {
            _results.push(seq[i]);
          }
          return _results;
        })()
      ].concat(ans);
    };
  })();

  _scrollbar_width = (function() {
    var _cache;
    _cache = null;
    return function() {
      var div, w1, w2;
      if (_cache) {
        return _cache;
      }
      div = $("<div style=\"width:50px;height:50px;overflow:hidden;position:absolute;top:-200px;left:-200px;\"><div style=\"height:100px;\"></div></div>");
      $(document.body).append(div);
      w1 = $("div", div).innerWidth();
      div.css("overflow-y", "auto");
      w2 = $("div", div).innerWidth();
      $(div).remove();
      return _cache = w1 - w2;
    };
  })();

  Chromatic.GalleryView = (function() {
    function GalleryView(el, photos, options) {
      this.zoom = __bind(this.zoom, this);
      this.layout = __bind(this.layout, this);
      this.lazyLoad = __bind(this.lazyLoad, this);
      this.calculateAspectRatios = __bind(this.calculateAspectRatios, this);
      if (el[0] === document.body) {
        this.el = $('<div class="chromatic-gallery-full"/>');
        $(el).append(this.el);
      } else {
        this.el = $(el).addClass('chromatic-gallery');
      }
      this.photos = _.map(photos, function(p) {
        if (_.isObject(p)) {
          return p;
        } else {
          return {
            small: p
          };
        }
      });
      this.zoom_view = new Chromatic.ZoomView(this.photos, options);
      this.photo_views = _.map(this.photos, (function(_this) {
        return function(photo) {
          return new Chromatic.GalleryPhotoView(_this, photo, options);
        };
      })(this));
      this.ideal_height = parseInt(this.el.children().first().css('height'));
      $(window).on('resize', _.debounce(this.layout, 100));
      this.el.on('scroll', _.throttle(this.lazyLoad, 100));
      if (!!this.photos[0].aspect_ratio) {
        this.layout();
      } else {
        this.calculateAspectRatios();
      }
    }

    GalleryView.prototype.calculateAspectRatios = function() {
      var layout;
      layout = _.after(this.photos.length, this.layout);
      return _.each(this.photo_views, function(p) {
        return p.load(layout);
      });
    };

    GalleryView.prototype.lazyLoad = function() {
      var threshold, viewport_bottom, viewport_top;
      threshold = 1000;
      viewport_top = this.el.scrollTop() - threshold;
      viewport_bottom = (this.el.height() || $(window).height()) + this.el.scrollTop() + threshold;
      return _.each(this.photo_views, (function(_this) {
        return function(photo_view) {
          if (photo_view.top < viewport_bottom && photo_view.bottom > viewport_top) {
            return photo_view.load();
          } else {
            return photo_view.unload();
          }
        };
      })(this));
    };

    GalleryView.prototype.layout = function() {
      var ideal_height, index, partition, rows, summed_width, viewport_width, weights;
      $(document.body).css('overflowY', 'scroll');
      viewport_width = this.el[0].getBoundingClientRect().width - parseInt(this.el.css('paddingLeft')) - parseInt(this.el.css('paddingRight'));
      if (this.el[0].offsetWidth > this.el[0].scrollWidth) {
        viewport_width = viewport_width - _scrollbar_width();
      }
      $(document.body).css('overflowY', 'auto');
      ideal_height = this.ideal_height || parseInt((this.el.height() || $(window).height()) / 2);
      summed_width = _.reduce(this.photos, (function(sum, p) {
        return sum += p.aspect_ratio * ideal_height;
      }), 0);
      rows = Math.round(summed_width / viewport_width);
      if (rows < 1) {
        _.each(this.photos, (function(_this) {
          return function(photo, i) {
            return _this.photo_views[i].resize(parseInt(ideal_height * photo.aspect_ratio), ideal_height);
          };
        })(this));
      } else {
        weights = _.map(this.photos, function(p) {
          return parseInt(p.aspect_ratio * 100);
        });
        partition = _linear_partition(weights, rows);
        index = 0;
        _.each(partition, (function(_this) {
          return function(row) {
            var row_buffer, summed_ars;
            row_buffer = [];
            _.each(row, function(p, i) {
              return row_buffer.push(_this.photos[index + i]);
            });
            summed_ars = _.reduce(row_buffer, (function(sum, p) {
              return sum += p.aspect_ratio;
            }), 0);
            summed_width = 0;
            _.each(row_buffer, function(p, i) {
              var height, width;
              width = i === row_buffer.length - 1 ? viewport_width - summed_width : parseInt(viewport_width / summed_ars * p.aspect_ratio);
              height = parseInt(viewport_width / summed_ars);
              _this.photo_views[index + i].resize(width, height);
              return summed_width += width;
            });
            return index += row.length;
          };
        })(this));
      }
      return this.lazyLoad();
    };

    GalleryView.prototype.zoom = function(photo) {
      return this.zoom_view.show(photo);
    };

    return GalleryView;

  })();

  this.Chromatic = this.Chromatic || {};

  Chromatic.GalleryPhotoView = (function() {
    function GalleryPhotoView(parent, photo, options) {
      this.zoom = __bind(this.zoom, this);
      this.unload = __bind(this.unload, this);
      this.load = __bind(this.load, this);
      this.parent = parent;
      this.photo = photo;
      this.el = $('<div class="chromatic-gallery-photo"/>');
      parent.el.append(this.el);
      this.el.on('click', this.zoom);
    }

    GalleryPhotoView.prototype.load = function(callback) {
      var image;
      if (this.loaded) {
        return;
      }
      image = new Image();
      image.onload = (function(_this) {
        return function() {
          _this.photo.aspect_ratio = image.width / image.height;
          if (callback) {
            callback();
          }
          _this.el.css('backgroundImage', "url(" + _this.photo.small + ")");
          return _this.loaded = true;
        };
      })(this);
      return image.src = this.photo.small;
    };

    GalleryPhotoView.prototype.unload = function() {
      this.el.css('backgroundImage', "");
      return this.loaded = false;
    };

    GalleryPhotoView.prototype.zoom = function() {
      return this.parent.zoom(this.photo);
    };

    GalleryPhotoView.prototype.resize = function(width, height) {
      this.el.css({
        width: width - parseInt(this.el.css('marginLeft')) - parseInt(this.el.css('marginRight')),
        height: height - parseInt(this.el.css('marginTop')) - parseInt(this.el.css('marginBottom'))
      });
      this.top = this.el.position().top;
      return this.bottom = this.top + this.el.height();
    };

    return GalleryPhotoView;

  })();

  this.Chromatic = this.Chromatic || {};

  $.extend($.easing, {
    easeOutCirc: function(x, t, b, c, d) {
      return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
    }
  });

  jQuery.event.special.swipe.settings.sensitivity = 100;

  Chromatic.ZoomView = (function() {
    function ZoomView(photos, options) {
      this.cancel = __bind(this.cancel, this);
      this.move = __bind(this.move, this);
      this.layout = __bind(this.layout, this);
      this.hideArrows = __bind(this.hideArrows, this);
      this.showArrows = __bind(this.showArrows, this);
      this.showPrevious = __bind(this.showPrevious, this);
      this.showNext = __bind(this.showNext, this);
      this.show = __bind(this.show, this);
      this.close = __bind(this.close, this);
      this.el = $('<div class="chromatic-zoom"/>');
      this.el.html("<div class=\"chromatic-zoom-arrow-left\"></div><div class=\"chromatic-zoom-arrow-right\"></div>");
      this.photos = photos;
      $(document.body).append(this.el);
      this.el.hide().on('click swipeup', this.close).on('mousemove mouseenter', this.showArrows).on('mouseleave', this.hideArrows).on('click', '.chromatic-zoom-arrow-left', this.showPrevious).on('swiperight', this.showPrevious).on('click', '.chromatic-zoom-arrow-right', this.showNext).on('swipeleft', this.showNext).on('move', this.move).on('swipecanceled', this.cancel);
      this._debouncedLayout = _.debounce(((function(_this) {
        return function() {
          return _this.layout();
        };
      })(this)), 100);
    }

    ZoomView.prototype.close = function() {
      $(document.body).css('overflowY', 'auto');
      clearTimeout(this.arrows_timer);
      key.unbind('esc');
      key.unbind('enter');
      key.unbind('up');
      key.unbind('left');
      key.unbind('j');
      key.unbind('right');
      key.unbind('k');
      return this.el.fadeOut(500, (function(_this) {
        return function() {
          _this.previous_zoom_photo_view.remove();
          _this.current_zoom_photo_view.remove();
          _this.next_zoom_photo_view.remove();
          _this.previous_zoom_photo_view = null;
          _this.current_zoom_photo_view = null;
          return _this.next_zoom_photo_view = null;
        };
      })(this));
    };

    ZoomView.prototype.show = function(photo) {
      var next, previous;
      $(document.body).css('overflowY', 'hidden');
      key('esc, enter, up', this.close);
      key('left, k', _.debounce(this.showPrevious, 100, true));
      key('right, j', _.debounce(this.showNext, 100, true));
      $(window).on('resize orientationchange', this._debouncedLayout);
      this.hideArrows(false);
      this.el.fadeIn(500);
      if (this.previous_zoom_photo_view) {
        this.previous_zoom_photo_view.remove();
      }
      if (this.current_zoom_photo_view) {
        this.current_zoom_photo_view.remove();
      }
      if (this.next_zoom_photo_view) {
        this.next_zoom_photo_view.remove();
      }
      previous = this.photos[this.photos.indexOf(photo) - 1] || this.photos[this.photos.length - 1];
      this.current = photo;
      next = this.photos[this.photos.indexOf(photo) + 1] || this.photos[0];
      this.previous_zoom_photo_view = new Chromatic.ZoomPhotoView(this, previous);
      this.current_zoom_photo_view = new Chromatic.ZoomPhotoView(this, this.current);
      this.next_zoom_photo_view = new Chromatic.ZoomPhotoView(this, next);
      this.layout();
      return this.el.show();
    };

    ZoomView.prototype.showNext = function(e) {
      var next;
      if (e) {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === "keydown") {
          this.hideArrows();
        } else {
          this.showArrows();
        }
      }
      this.previous_zoom_photo_view.remove();
      this.previous_zoom_photo_view = null;
      this.previous_zoom_photo_view = this.current_zoom_photo_view;
      this.current_zoom_photo_view = this.next_zoom_photo_view;
      this.current = this.photos[this.photos.indexOf(this.current) + 1] || this.photos[0];
      next = this.photos[this.photos.indexOf(this.current) + 1] || this.photos[0];
      this.next_zoom_photo_view = new Chromatic.ZoomPhotoView(this, next);
      this.previous_zoom_photo_view.layout('previous', 0, true);
      this.current_zoom_photo_view.layout('current', 0, true);
      return this.next_zoom_photo_view.layout('next', 0, false);
    };

    ZoomView.prototype.showPrevious = function(e) {
      var previous;
      if (e) {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === "keydown") {
          this.hideArrows();
        } else {
          this.showArrows();
        }
      }
      this.next_zoom_photo_view.remove();
      this.next_zoom_photo_view = null;
      this.next_zoom_photo_view = this.current_zoom_photo_view;
      this.current_zoom_photo_view = this.previous_zoom_photo_view;
      this.current = this.photos[this.photos.indexOf(this.current) - 1] || this.photos[this.photos.length - 1];
      previous = this.photos[this.photos.indexOf(this.current) - 1] || this.photos[this.photos.length - 1];
      this.previous_zoom_photo_view = new Chromatic.ZoomPhotoView(this, previous);
      this.next_zoom_photo_view.layout('next', 0, true);
      this.current_zoom_photo_view.layout('current', 0, true);
      return this.previous_zoom_photo_view.layout('previous', 0, false);
    };

    ZoomView.prototype.showArrows = function() {
      this.el.find(".arrow").stop().animate({
        opacity: 1
      }, 200);
      clearTimeout(this.arrows_timer);
      return this.arrows_timer = window.setTimeout(((function(_this) {
        return function() {
          return _this.hideArrows(true);
        };
      })(this)), 3000);
    };

    ZoomView.prototype.hideArrows = function(animated) {
      return this.el.find(".arrow").animate({
        opacity: 0.01
      }, animated != null ? animated : {
        1000: 0
      });
    };

    ZoomView.prototype.layout = function(offset, animated) {
      if (offset == null) {
        offset = 0;
      }
      this.current_zoom_photo_view.layout('current', offset, animated);
      this.previous_zoom_photo_view.layout('previous', offset, animated);
      return this.next_zoom_photo_view.layout('next', offset, animated);
    };

    ZoomView.prototype.move = function(e) {
      return this.layout(e.distX, false);
    };

    ZoomView.prototype.cancel = function(e) {
      return this.layout(0, true);
    };

    return ZoomView;

  })();

  this.Chromatic = this.Chromatic || {};

  _is_css_blur_supported = (function() {
    var _supported;
    _supported = 'dontknow';
    return function() {
      var el;
      if (_supported !== 'dontknow') {
        return _supported;
      }
      el = $('<div/>');
      $(document.body).append(el);
      el[0].style.webkitFilter = "grayscale(1)";
      _supported = window.getComputedStyle(el[0]).webkitFilter === "grayscale(1)";
      el.remove();
      return _supported;
    };
  })();

  Chromatic.ZoomPhotoView = (function() {
    function ZoomPhotoView(parent, photo, options) {
      this.layout = __bind(this.layout, this);
      this.render = __bind(this.render, this);
      this.remove = __bind(this.remove, this);
      this.photo = photo;
      this.el = $('<div/>');
      this.render();
      parent.el.append(this.el);
    }

    ZoomPhotoView.prototype.remove = function(photo) {
      return this.el.remove();
    };

    ZoomPhotoView.prototype.render = function() {
      var big_img;
      this.photo_el = $('<div class="chromatic-zoom-photo"></div>');
      this.grain_el = $('<div class="chromatic-zoom-grain"></div>');
      this.background_el = $('<div class="chromatic-zoom-background"></div>');
      if (this.photo.big) {
        big_img = new Image();
        big_img.onload = (function(_this) {
          return function() {
            return _this.photo_el.css('backgroundImage', "url(" + _this.photo.big + ")");
          };
        })(this);
        big_img.src = this.photo.big;
      }
      this.photo_el.css('backgroundImage', "url(" + this.photo.small + ")");
      if (this.photo.blur) {
        this.background_el.css('backgroundImage', "url(" + this.photo.blur + ")");
      } else if (_is_css_blur_supported()) {
        this.background_el.addClass('chromatic-zoom-background-blur').css('backgroundImage', "url(" + this.photo.small + ")");
      }
      this.el.append(this.photo_el, this.grain_el, this.background_el);
      return this;
    };

    ZoomPhotoView.prototype.layout = function(pos, offset, animated) {
      var container, height, left, opacity, width;
      if (offset == null) {
        offset = 0;
      }
      container = $(window);
      if (container.width() / container.height() > this.photo.aspect_ratio) {
        height = container.height();
        width = container.height() * this.photo.aspect_ratio;
      } else {
        height = container.width() / this.photo.aspect_ratio;
        width = container.width();
      }
      this.photo_el.css({
        height: height,
        width: width,
        top: (container.height() - height) / 2
      });
      left = (function() {
        switch (pos) {
          case 'previous':
            return -width - 20 + offset;
          case 'current':
            return (container.width() - width) / 2 + offset;
          case 'next':
            return container.width() + 20 + offset;
        }
      })();
      opacity = (function() {
        switch (pos) {
          case 'current':
            return 1 - Math.abs(offset) / container.width() * 2;
          case 'previous':
            return 0 + offset / container.width() * 2;
          case 'next':
            return 0 - offset / container.width() * 2;
        }
      })();
      if (animated) {
        this.photo_el.stop().animate({
          left: left
        }, 600, 'easeOutCirc');
        this.grain_el.stop().animate({
          opacity: opacity
        }, 600, 'easeOutCirc');
        return this.background_el.stop().animate({
          opacity: opacity
        }, 600, 'easeOutCirc');
      } else {
        this.photo_el.css('left', left);
        this.grain_el.css('opacity', opacity);
        return this.background_el.css('opacity', opacity);
      }
    };

    return ZoomPhotoView;

  })();

}).call(this);
